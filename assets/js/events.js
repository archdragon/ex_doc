/* globals sidebarNodes */

// Dependencies
// ------------

import $ from 'jquery'
import {search} from './search'
import * as helpers from './helpers'
import {toggleSidebar, openSidebar} from './sidebar'
import {toggleNightMode} from './night'

import sidebarItemsTemplate from './templates/sidebar-items.handlebars'
import autocompleteResultsTemplate from './templates/autocomplete-results.handlebars'

// Constants
// ---------

var contentsJSON=[{"type":"module","title":"ExDoc.Formatter.HTML.SearchContents","text":"ExDoc Formatter HTML SearchContents","ref":"ExDoc.Formatter.HTML.SearchContents.html","module":"ExDoc.Formatter.HTML.SearchContents","doc":"Generates a JSON in order to create an index for lunr.js with searchable content."},{"type":"function","title":"ExDoc.Formatter.HTML.SearchContents.create_contents_json/2","text":"ExDoc Formatter HTML SearchContents create_contents_json/2 create_contents_json create contents json","ref":"ExDoc.Formatter.HTML.SearchContents.html#create_contents_json/2","module":"ExDoc.Formatter.HTML.SearchContents","doc":""},{"type":"module","title":"ExDoc.Highlighter","text":"ExDoc Highlighter","ref":"ExDoc.Highlighter.html","module":"ExDoc.Highlighter","doc":"Performs code highlighting."},{"type":"function","title":"ExDoc.Highlighter.assets/1","text":"ExDoc Highlighter assets/1 assets","ref":"ExDoc.Highlighter.html#assets/1","module":"ExDoc.Highlighter","doc":"Highlighter specific assets."},{"type":"function","title":"ExDoc.Highlighter.before_closing_body_tag/1","text":"ExDoc Highlighter before_closing_body_tag/1 before_closing_body_tag before closing body tag","ref":"ExDoc.Highlighter.html#before_closing_body_tag/1","module":"ExDoc.Highlighter","doc":"Highlighter specific annotations."},{"type":"function","title":"ExDoc.Highlighter.before_closing_head_tag/1","text":"ExDoc Highlighter before_closing_head_tag/1 before_closing_head_tag before closing head tag","ref":"ExDoc.Highlighter.html#before_closing_head_tag/1","module":"ExDoc.Highlighter","doc":"Highlighter specific annotations."},{"type":"function","title":"ExDoc.Highlighter.highlight_code_blocks/1","text":"ExDoc Highlighter highlight_code_blocks/1 highlight_code_blocks highlight code blocks","ref":"ExDoc.Highlighter.html#highlight_code_blocks/1","module":"ExDoc.Highlighter","doc":"Highlights all code block in an already generated HTML document."},{"type":"behaviour","title":"ExDoc.Markdown","text":"ExDoc Markdown","ref":"ExDoc.Markdown.html","module":"ExDoc.Markdown","doc":"Adapter behaviour and conveniences for converting Markdown to HTML. ExDoc is compatible with any markdown processor that implements the functions defined in this module. The markdown processor can be changed via the :markdown_processor option in your mix.exs or via the :markdown_processor configuration in the :ex_doc configuration. ExDoc supports the following Markdown parsers out of the box: Earmark Cmark ExDoc uses Earmark by default."},{"type":"callback","title":"ExDoc.Markdown.assets/1","text":"ExDoc Markdown assets/1 assets","ref":"ExDoc.Markdown.html#c:assets/1","module":"ExDoc.Markdown","doc":"Assets specific to the markdown implementation. This callback takes the documentation format (:html or :epub) as an argument and must return a list of pairs of the form {basename, content} where: basename - relative path that will be written inside the doc/ directory. content - is a binary with the full contents of the file that will be written to basename. EPUB Documentation Gotchas Generating HTML documentation is simple, and it works exacly as you would expect for a webpage. The EPUB file format, on the other hand, may cause some surprise. Apparently, an EPUB file expects all assets to have a unique name when discarding the file extension. This creates problems if you include, for example, the files custom.js and custom.css. Because the filename without the extension is equal (custom), you will get an unreadable EPUB. It&#39;s possible to go around this limitation by simply giving the files unique names: custom.js becomes custom-js.js and custom.css becomes custom-css.css Example def callback assets(_) do [{&quot;dist/custom-css.css&quot;, custom_css_content()}, {&quot;dist/custom-js.js&quot;, custom_js_content()}] end"},{"type":"callback","title":"ExDoc.Markdown.before_closing_body_tag/1","text":"ExDoc Markdown before_closing_body_tag/1 before_closing_body_tag before closing body tag","ref":"ExDoc.Markdown.html#c:before_closing_body_tag/1","module":"ExDoc.Markdown","doc":"Literal content to be written to the file just before the closing body tag. This callback takes the documentation format (:html or :epub) as an argument and returns a literal string. It is useful when the markdown processor needs to a include extra JavaScript. Example def callback before_closing_body_tag(_) do # Include the Javascript specified in the assets/1 callback ~S(&lt;script src=&quot;dist/custom-js.js&quot;&gt;&lt;/script&gt;) end"},{"type":"callback","title":"ExDoc.Markdown.before_closing_head_tag/1","text":"ExDoc Markdown before_closing_head_tag/1 before_closing_head_tag before closing head tag","ref":"ExDoc.Markdown.html#c:before_closing_head_tag/1","module":"ExDoc.Markdown","doc":"Literal content to be written to the file just before the closing head tag. This callback takes the documentation format (:html or :epub) as an argument and returns a literal string. It is useful when the markdown processor needs to a include extra CSS. Example def callback before_closing_head_tag(_) do # Include the CSS specified in the assets/1 callback ~S(&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/custom-css.css&quot;/&gt;) end"},{"type":"callback","title":"ExDoc.Markdown.configure/1","text":"ExDoc Markdown configure/1 configure","ref":"ExDoc.Markdown.html#c:configure/1","module":"ExDoc.Markdown","doc":"A function that accepts configuration options and configures the markdown processor. It is run once when :ex_doc is loaded, and the return value is discarded. Modules that implement this behaviour will probably store the options somewhere so that they can be accessed when needed. The format of the options as well as what the function does with them is completely up to the module that implements the behaviour."},{"type":"function","title":"ExDoc.Markdown.get_markdown_processor/0","text":"ExDoc Markdown get_markdown_processor/0 get_markdown_processor get markdown processor","ref":"ExDoc.Markdown.html#get_markdown_processor/0","module":"ExDoc.Markdown","doc":"Gets the current markdown processor set globally."},{"type":"function","title":"ExDoc.Markdown.put_markdown_processor/1","text":"ExDoc Markdown put_markdown_processor/1 put_markdown_processor put markdown processor","ref":"ExDoc.Markdown.html#put_markdown_processor/1","module":"ExDoc.Markdown","doc":"Changes the markdown processor globally."},{"type":"function","title":"ExDoc.Markdown.to_html/2","text":"ExDoc Markdown to_html/2 to_html to html","ref":"ExDoc.Markdown.html#to_html/2","module":"ExDoc.Markdown","doc":"Converts the given markdown document to HTML."},{"type":"callback","title":"ExDoc.Markdown.to_html/2","text":"ExDoc Markdown to_html/2 to_html to html","ref":"ExDoc.Markdown.html#c:to_html/2","module":"ExDoc.Markdown","doc":"Converts markdown into HTML."},{"type":"module","title":"ExDoc.Markdown.Cmark","text":"ExDoc Markdown Cmark","ref":"ExDoc.Markdown.Cmark.html","module":"ExDoc.Markdown.Cmark","doc":"ExDoc extension for the Cmark Markdown parser."},{"type":"function","title":"ExDoc.Markdown.Cmark.assets/1","text":"ExDoc Markdown Cmark assets/1 assets","ref":"ExDoc.Markdown.Cmark.html#assets/1","module":"ExDoc.Markdown.Cmark","doc":"Assets specific to the markdown implementation. This callback takes the documentation format (:html or :epub) as an argument and must return a list of pairs of the form {basename, content} where: basename - relative path that will be written inside the doc/ directory. content - is a binary with the full contents of the file that will be written to basename. EPUB Documentation Gotchas Generating HTML documentation is simple, and it works exacly as you would expect for a webpage. The EPUB file format, on the other hand, may cause some surprise. Apparently, an EPUB file expects all assets to have a unique name when discarding the file extension. This creates problems if you include, for example, the files custom.js and custom.css. Because the filename without the extension is equal (custom), you will get an unreadable EPUB. It&#39;s possible to go around this limitation by simply giving the files unique names: custom.js becomes custom-js.js and custom.css becomes custom-css.css Example def callback assets(_) do [{&quot;dist/custom-css.css&quot;, custom_css_content()}, {&quot;dist/custom-js.js&quot;, custom_js_content()}] end Callback implementation for ExDoc.Markdown.assets/1."},{"type":"function","title":"ExDoc.Markdown.Cmark.available?/0","text":"ExDoc Markdown Cmark available?/0 available?","ref":"ExDoc.Markdown.Cmark.html#available?/0","module":"ExDoc.Markdown.Cmark","doc":"Check if the Cmark Markdown parser module is available."},{"type":"function","title":"ExDoc.Markdown.Cmark.before_closing_body_tag/1","text":"ExDoc Markdown Cmark before_closing_body_tag/1 before_closing_body_tag before closing body tag","ref":"ExDoc.Markdown.Cmark.html#before_closing_body_tag/1","module":"ExDoc.Markdown.Cmark","doc":"Literal content to be written to the file just before the closing body tag. This callback takes the documentation format (:html or :epub) as an argument and returns a literal string. It is useful when the markdown processor needs to a include extra JavaScript. Example def callback before_closing_body_tag(_) do # Include the Javascript specified in the assets/1 callback ~S(&lt;script src=&quot;dist/custom-js.js&quot;&gt;&lt;/script&gt;) end Callback implementation for ExDoc.Markdown.before_closing_body_tag/1."},{"type":"function","title":"ExDoc.Markdown.Cmark.before_closing_head_tag/1","text":"ExDoc Markdown Cmark before_closing_head_tag/1 before_closing_head_tag before closing head tag","ref":"ExDoc.Markdown.Cmark.html#before_closing_head_tag/1","module":"ExDoc.Markdown.Cmark","doc":"Literal content to be written to the file just before the closing head tag. This callback takes the documentation format (:html or :epub) as an argument and returns a literal string. It is useful when the markdown processor needs to a include extra CSS. Example def callback before_closing_head_tag(_) do # Include the CSS specified in the assets/1 callback ~S(&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/custom-css.css&quot;/&gt;) end Callback implementation for ExDoc.Markdown.before_closing_head_tag/1."},{"type":"function","title":"ExDoc.Markdown.Cmark.configure/1","text":"ExDoc Markdown Cmark configure/1 configure","ref":"ExDoc.Markdown.Cmark.html#configure/1","module":"ExDoc.Markdown.Cmark","doc":"A function that accepts configuration options and configures the markdown processor. It is run once when :ex_doc is loaded, and the return value is discarded. Modules that implement this behaviour will probably store the options somewhere so that they can be accessed when needed. The format of the options as well as what the function does with them is completely up to the module that implements the behaviour. Callback implementation for ExDoc.Markdown.configure/1."},{"type":"function","title":"ExDoc.Markdown.Cmark.to_html/2","text":"ExDoc Markdown Cmark to_html/2 to_html to html","ref":"ExDoc.Markdown.Cmark.html#to_html/2","module":"ExDoc.Markdown.Cmark","doc":"Generate HTML output. Cmark takes no options."},{"type":"module","title":"ExDoc.Markdown.Earmark","text":"ExDoc Markdown Earmark","ref":"ExDoc.Markdown.Earmark.html","module":"ExDoc.Markdown.Earmark","doc":"ExDoc extension for the Earmark MarkDown parser."},{"type":"function","title":"ExDoc.Markdown.Earmark.assets/1","text":"ExDoc Markdown Earmark assets/1 assets","ref":"ExDoc.Markdown.Earmark.html#assets/1","module":"ExDoc.Markdown.Earmark","doc":"Assets specific to the markdown implementation. This callback takes the documentation format (:html or :epub) as an argument and must return a list of pairs of the form {basename, content} where: basename - relative path that will be written inside the doc/ directory. content - is a binary with the full contents of the file that will be written to basename. EPUB Documentation Gotchas Generating HTML documentation is simple, and it works exacly as you would expect for a webpage. The EPUB file format, on the other hand, may cause some surprise. Apparently, an EPUB file expects all assets to have a unique name when discarding the file extension. This creates problems if you include, for example, the files custom.js and custom.css. Because the filename without the extension is equal (custom), you will get an unreadable EPUB. It&#39;s possible to go around this limitation by simply giving the files unique names: custom.js becomes custom-js.js and custom.css becomes custom-css.css Example def callback assets(_) do [{&quot;dist/custom-css.css&quot;, custom_css_content()}, {&quot;dist/custom-js.js&quot;, custom_js_content()}] end Callback implementation for ExDoc.Markdown.assets/1."},{"type":"function","title":"ExDoc.Markdown.Earmark.available?/0","text":"ExDoc Markdown Earmark available?/0 available?","ref":"ExDoc.Markdown.Earmark.html#available?/0","module":"ExDoc.Markdown.Earmark","doc":"Check if the Earmark Markdown parser module is available."},{"type":"function","title":"ExDoc.Markdown.Earmark.before_closing_body_tag/1","text":"ExDoc Markdown Earmark before_closing_body_tag/1 before_closing_body_tag before closing body tag","ref":"ExDoc.Markdown.Earmark.html#before_closing_body_tag/1","module":"ExDoc.Markdown.Earmark","doc":"Literal content to be written to the file just before the closing body tag. This callback takes the documentation format (:html or :epub) as an argument and returns a literal string. It is useful when the markdown processor needs to a include extra JavaScript. Example def callback before_closing_body_tag(_) do # Include the Javascript specified in the assets/1 callback ~S(&lt;script src=&quot;dist/custom-js.js&quot;&gt;&lt;/script&gt;) end Callback implementation for ExDoc.Markdown.before_closing_body_tag/1."},{"type":"function","title":"ExDoc.Markdown.Earmark.before_closing_head_tag/1","text":"ExDoc Markdown Earmark before_closing_head_tag/1 before_closing_head_tag before closing head tag","ref":"ExDoc.Markdown.Earmark.html#before_closing_head_tag/1","module":"ExDoc.Markdown.Earmark","doc":"Literal content to be written to the file just before the closing head tag. This callback takes the documentation format (:html or :epub) as an argument and returns a literal string. It is useful when the markdown processor needs to a include extra CSS. Example def callback before_closing_head_tag(_) do # Include the CSS specified in the assets/1 callback ~S(&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/custom-css.css&quot;/&gt;) end Callback implementation for ExDoc.Markdown.before_closing_head_tag/1."},{"type":"function","title":"ExDoc.Markdown.Earmark.configure/1","text":"ExDoc Markdown Earmark configure/1 configure","ref":"ExDoc.Markdown.Earmark.html#configure/1","module":"ExDoc.Markdown.Earmark","doc":"A function that accepts configuration options and configures the markdown processor. It is run once when :ex_doc is loaded, and the return value is discarded. Modules that implement this behaviour will probably store the options somewhere so that they can be accessed when needed. The format of the options as well as what the function does with them is completely up to the module that implements the behaviour. Callback implementation for ExDoc.Markdown.configure/1."},{"type":"function","title":"ExDoc.Markdown.Earmark.to_html/2","text":"ExDoc Markdown Earmark to_html/2 to_html to html","ref":"ExDoc.Markdown.Earmark.html#to_html/2","module":"ExDoc.Markdown.Earmark","doc":"Earmark specific options: :gfm - boolean. Turns on Github Flavored Markdown extensions. True by default :breaks - boolean. Only applicable if gfm is enabled. Makes all line breaks significant (so every line in the input is a new line in the output) :smartypants - boolean. Turns on smartypants processing, so quotes become curly, two or three hyphens become en and em dashes, and so on. False by default :plugins - map of strings to modules. Register custom plugins to be used with Earmark. See Plugins for details on how to write custom plugins."},{"type":"module","title":"ExDoc.FunctionNode","text":"ExDoc FunctionNode","ref":"ExDoc.FunctionNode.html","module":"ExDoc.FunctionNode","doc":"Structure that represents an individual function."},{"type":"type","title":"ExDoc.FunctionNode.t/0","text":"ExDoc FunctionNode t/0 t","ref":"ExDoc.FunctionNode.html#t:t/0","module":"ExDoc.FunctionNode","doc":""},{"type":"module","title":"ExDoc.ModuleNode","text":"ExDoc ModuleNode","ref":"ExDoc.ModuleNode.html","module":"ExDoc.ModuleNode","doc":"Structure that represents a module."},{"type":"type","title":"ExDoc.ModuleNode.t/0","text":"ExDoc ModuleNode t/0 t","ref":"ExDoc.ModuleNode.html#t:t/0","module":"ExDoc.ModuleNode","doc":""},{"type":"module","title":"ExDoc.TypeNode","text":"ExDoc TypeNode","ref":"ExDoc.TypeNode.html","module":"ExDoc.TypeNode","doc":"Structure that represents an individual type."},{"type":"type","title":"ExDoc.TypeNode.t/0","text":"ExDoc TypeNode t/0 t","ref":"ExDoc.TypeNode.html#t:t/0","module":"ExDoc.TypeNode","doc":""},{"type":"task","title":"Mix.Tasks.Docs","text":"Mix Tasks Docs","ref":"Mix.Tasks.Docs.html","module":"Mix.Tasks.Docs","doc":"Uses ExDoc to generate a static web page from the project documentation. Command line options --canonical, -n - Indicate the preferred URL with rel=&quot;canonical&quot; link element, defaults to no canonical path --formatter, -f - Which formatters to use, &quot;html&quot; or &quot;epub&quot;, default: &quot;html&quot; (may be given more than once) --output, -o - Output directory for the generated docs, default: &quot;doc&quot; The command line options have higher precedence than the options specified in your mix.exs file below. Configuration ExDoc will automatically pull in information from your project, like the application and version. However, you may want to set :name, :source_url and :homepage_url to have a nicer output from ExDoc, for example: def project do [app: :my_app, version: &quot;0.1.0-dev&quot;, deps: deps(), # Docs name: &quot;My App&quot;, source_url: &quot;https://github.com/USER/PROJECT&quot;, homepage_url: &quot;http://YOUR_PROJECT_HOMEPAGE&quot;, docs: [main: &quot;MyApp&quot;, # The main page in the docs logo: &quot;path/to/logo.png&quot;, extras: [&quot;README.md&quot;]]] end ExDoc also allows configuration specific to the documentation to be set. The following options should be put under the :docs key in your project&#39;s main configuration. The :docs options should be a keyword list or a function returning a keyword list that will be lazily executed. :api_reference - Whether to generate api-reference.html; default: true. If this is set to false, :main must also be set. :assets - Path to a directory that will be copied as is to the &quot;assets&quot; directory in the output path. Its entries may be referenced in your docs under &quot;assets/ASSET.EXTENSION&quot;; defaults to no assets directory. :before_closing_body_tag - a function that takes as argument an atom specifying the formatter being used (:html or :epub) and returns a literal HTML string to be included just before the closing body tag (&lt;/body&gt;). The atom given as argument can be used to include different content in both formats. Useful to inject custom assets, such as Javascript. :before_closing_head_tag - a function that takes as argument an atom specifying the formatter being used (:html or :epub) and returns a literal HTML string to be included just before the closing head tag (&lt;/head&gt;). The atom given as argument can be used to include different content in both formats. Useful to inject custom assets, such as CSS stylesheets. :canonical - String that defines the preferred URL with the rel=&quot;canonical&quot; element; defaults to no canonical path. :deps - A keyword list application names and their documentation URL. ExDoc will by default include all dependencies and assume they are hosted on HexDocs. This can be overridden by your own values. Example: [plug: &quot;https://myserver/plug/&quot;] :extra_section - String that defines the section title of the additional Markdown pages; default: &quot;PAGES&quot;. Example: &quot;GUIDES&quot; :extras - List of keywords, each key must indicate the path to additional Markdown pages, the value for each keyword (optional) gives you more control about the PATH and the title of the output files; default: []. Example: [&quot;README.md&quot;, &quot;CONTRIBUTING.md&quot;: [filename: &quot;contributing&quot;, title: &quot;Contributing&quot;]] :filter_prefix - Include only modules that match the given prefix in the generated documentation. Example: &quot;MyApp.Core&quot; :formatters - Formatter to use; default: [&quot;html&quot;], options: &quot;html&quot;, &quot;epub&quot;. :groups_for_extras, :groups_for_modules, :groups_for_functions - See the &quot;Groups&quot; section :javascript_config_path - Path of an additional JavaScript file to be included on all pages to provide up-to-date data for features like the version dropdown - See the &quot;Additional JavaScript config&quot; section. Example: &quot;../versions.js&quot; :nest_modules_by_prefix - See the &quot;Nesting&quot; section :language - Identify the primary language of the documents, its value must be a valid BCP 47 language tag; default: &quot;en&quot; :logo - Path to the image logo of the project (only PNG or JPEG accepted) The image size will be 64x64. When specified, the logo will be placed under the &quot;assets&quot; directory in the output path under the name &quot;logo&quot; and the appropriate extension. :main - Main page of the documentation. It may be a module or a generated page, like &quot;Plug&quot; or &quot;api-reference&quot;; default: &quot;api-reference&quot;. :markdown_processor - The markdown processor to use; :markdown_processor_options - Configuration options for the markdown processor; :source_beam - Path to the beam directory; default: mix&#39;s compile path. :source_ref - The branch/commit/tag used for source link inference; default: &quot;master&quot;. :source_url_pattern - Public URL of the project. Derived from project&#39;s :source_url and :source_ref. Example: &quot;https://github.com/USER/APP/blob/master/%{path}#L%{line}&quot; :output - Output directory for the generated docs; default: &quot;doc&quot;. May be overridden by command line argument. :ignore_apps - Apps to be ignored when generating documentation in an umbrella project. Receives a list of atoms. Example: [:first_app, :second_app]. :skip_undefined_reference_warnings_on - ExDoc warns when it can&#39;t create a Mod.fun/arity reference in the current project docs e.g. because of a typo. This list controls which docs pages to skip the warnings on, which is useful for e.g. deprecation pages; default: []. Groups ExDoc content can be organized in groups. This is done via the :groups_for_extras and :groups_for_modules. For example, imagine you are storing extra guides in your documentation which are organized per directory. In the extras section you have: extras: [ &quot;guides/introduction/foo.md&quot;, &quot;guides/introduction/bar.md&quot;, ... &quot;guides/advanced/baz.md&quot;, &quot;guides/advanced/bat.md&quot;, ] You can have those grouped as follows: groups_for_extras: [ &quot;Introduction&quot;: Path.wildcard(&quot;guides/introduction/*.md&quot;), &quot;Advanced&quot;: Path.wildcard(&quot;guides/advanced/*.md&quot;) ] Or via a regex: groups_for_extras: [ &quot;Introduction&quot;: ~r&quot;/introduction/&quot; &quot;Advanced&quot;: ~r&quot;/advanced/&quot; ] Similar can be done for modules: groups_for_modules: [ &quot;Data types&quot;: [Atom, Regex, URI], &quot;Collections&quot;: [Enum, MapSet, Stream], ] A regex or the string name of the module is also supported. Grouping functions Functions inside a module can also be organized in groups. This is done via the :groups_for_functions configuration which is a keyword list of group titles and filtering functions that receive the documentation metadata of functions as argument. For example, imagine that you have an API client library with a large surface area for all the API endpoints you need to support. It would be helpful to group the functions with similar responsibilities together. In this case in your module you might have: defmodule APIClient do @doc section: :auth def refresh_token(params \\\\ []) @doc subject: :object def update_status(id, new_status) @doc permission: :grant def grant_privilege(resource, privilege) end And then in the configuration you can group these with: groups_for_functions: [ Authentication: &amp; &amp;1[:section] == :auth, Resource: &amp; &amp;1[:subject] == :object, Admin: &amp; &amp;1[:permission] in [:grant, :write] ] A function can belong to a single group only. If multiple group filters match, the first will take precedence. Functions that don&#39;t have a custom group will be listed under the default &quot;Functions&quot; group. Additional JavaScript config Since version 0.20.0 ExDoc includes a way to enrich the documentation with new information without having to re-generate it, through a JavaScript file that can be shared across documentation for multiple versions of the package. If :javascript_config_path is set when building the documentation, this script will be referenced in each page&#39;s &lt;head&gt; using a &lt;script&gt; tag. The script should define data in global JavaScript variables that will be interpreted by ex_doc when viewing the documentation. Currenly supported variables: versionNodes This global JavaScript variable should be providing an array of objects that define all versions of this Mix package which should appear in the package versions dropdown in the documentation sidebar. The versions dropdown allows for switching between package versions&#39; documentation. Example: var versionNodes = [ { version: &quot;v0.0.0&quot;, // version number or name (required) url: &quot;https://hexdocs.pm/ex_doc/0.19.3/&quot; // documentation URL (required) } ] Nesting ExDoc also allows module names in the sidebar to appear nested under a given prefix. The :nest_modules_by_prefix expects a list of module names, such as [Foo.Bar, Bar.Baz]. In this case, a module named Foo.Bar.Baz will appear nested within Foo.Bar and only the name Baz will be shown in the sidebar. Note the Foo.Bar module itself is not affected. This option is mainly intended to improve the display of long module names in the sidebar, particularly when they are too long for the sidebar or when many modules share a long prefix. If you mean to group modules logically or call attention to them in the docs, you should probably use :groups_for_modules (which can be used in conjuction with :nest_modules_by_prefix). Umbrella project ExDoc can be used in an umbrella project and generates a single documentation for all child apps. You can use the :ignore_apps configuration to exclude certain projects in the umbrella from documentation. Generating documentation per each child app can be achieved by running: mix cmd mix docs See mix help cmd for more information."},{"type":"extras","title":"API Reference","text":null,"ref":"api-reference.html","module":"api-reference","doc":"ex_doc v0.19.3 API Reference"},{"type":"extras","title":"API Reference - Modules","text":null,"ref":"api-reference.html#modules","module":"api-reference","doc":"ExDoc.Formatter.HTML.SearchContents Generates a JSON in order to create an index for lunr.js with searchable content ExDoc.FunctionNode Structure that represents an individual function ExDoc.Highlighter Performs code highlighting ExDoc.Markdown Adapter behaviour and conveniences for converting Markdown to HTML ExDoc.Markdown.Cmark ExDoc extension for the Cmark Markdown parser ExDoc.Markdown.Earmark ExDoc extension for the Earmark MarkDown parser ExDoc.ModuleNode Structure that represents a module ExDoc.TypeNode Structure that represents an individual type"},{"type":"extras","title":"API Reference - Mix Tasks","text":null,"ref":"api-reference.html#mix-tasks","module":"api-reference","doc":"docs Uses ExDoc to generate a static web page from the project documentation"},{"type":"extras","title":"ExDoc","text":null,"ref":"readme.html","module":"readme","doc":"ExDoc ExDoc is a tool to generate documentation for your Elixir projects. In case you are looking for documentation for Elixir itself, check out Elixir&#39;s website. To learn about how to document your projects check out Elixir&#39;s writing documentation page. See the ExDoc Documentation."},{"type":"extras","title":"ExDoc - Using ExDoc with Mix","text":null,"ref":"readme.html#using-exdoc-with-mix","module":"readme","doc":"To use ExDoc in your Mix projects, first add ExDoc as a dependency. If you are using Elixir v1.7 and later: def deps do [ {:ex_doc, &quot;~&gt; 0.19&quot;, only: :dev, runtime: false}, ] end If you are using Elixir v1.6 and earlier: def deps do [ {:ex_doc, &quot;~&gt; 0.18.0&quot;, only: :dev, runtime: false}, ] end After adding ExDoc as a dependency, run mix deps.get to install it. ExDoc will automatically pull in information from your projects, like the application and version. However, you may want to set :name, :source_url and :homepage_url to have a nicer output from ExDoc, such as: def project do [ app: :my_app, version: &quot;0.1.0-dev&quot;, deps: deps(), # Docs name: &quot;MyApp&quot;, source_url: &quot;https://github.com/USER/PROJECT&quot;, homepage_url: &quot;http://YOUR_PROJECT_HOMEPAGE&quot;, docs: [ main: &quot;MyApp&quot;, # The main page in the docs logo: &quot;path/to/logo.png&quot;, extras: [&quot;README.md&quot;] ] ] end Now you are ready to generate your project documentation with mix docs. To see all options available when generating docs, run mix help docs."},{"type":"extras","title":"ExDoc - Using ExDoc via command line","text":null,"ref":"readme.html#using-exdoc-via-command-line","module":"readme","doc":"You can ExDoc via the command line as follows: Install ExDoc as an escript: $ mix escript.install hex ex_doc Then you are ready to use it in your projects. First, move into your project directory and make sure it is already compiled: $ cd PATH_TO_YOUR_PROJECT $ mix compile Next invoke the ex_doc executable from your project: $ ex_doc &quot;PROJECT_NAME&quot; &quot;PROJECT_VERSION&quot; path/to/project/ebin -m &quot;PROJECT_MODULE&quot; -u &quot;https://github.com/GITHUB_USER/GITHUB_REPO&quot; -l path/to/logo.png By default, ex_doc produces HTML files, but, you can also create a EPUB document passing the option --formatter epub: $ PATH_TO_YOUR_EXDOC/bin/ex_doc &quot;PROJECT_NAME&quot; &quot;PROJECT_VERSION&quot; path/to/project/ebin -m &quot;PROJECT_MODULE&quot; -u &quot;https://github.com/GITHUB_USER/GITHUB_REPO&quot; -l path/to/logo.png -f epub For example, here are some acceptable values: PROJECT_NAME =&gt; Ecto PROJECT_VERSION =&gt; 0.1.0 PROJECT_MODULE =&gt; Ecto (the main module provided by the library) GITHUB_USER =&gt; elixir-lang GITHUB_REPO =&gt; ecto"},{"type":"extras","title":"ExDoc - Auto-linking","text":null,"ref":"readme.html#auto-linking","module":"readme","doc":"ExDoc will automatically generate links across modules and functions if you enclose them in backticks: By referring to a module, function, type or callback from your project, such as `MyModule`, ExDoc will automatically link to those By referring to a module, function, type or callback from Elixir, such as [`String`](https://hexdocs.pm/elixir/String.html), ExDoc will automatically link to Elixir&#39;s stable documentation By referring to a module or function from erlang, such as (`:erlang`), ExDoc will automatically link to the Erlang documentation By referring to a module, function, type or callback from any of your dependencies, such as `MyDep`, ExDoc will automatically link to that dependency documentation on hexdocs.pm (the link can be configured by setting docs: [deps: [my_dep: &quot;https://path/to/docs/&quot;]] in your mix.exs) ExDoc supports linking to modules (`MyModule`), functions (`MyModule.function/1`), types (`t:MyModule.type/2`) and callbacks (`c:MyModule.callback/3`). If you want to link a function, type or callback in the current module, you may skip the module name, such as `function/1`."},{"type":"extras","title":"ExDoc - Changing the Markdown tool","text":null,"ref":"readme.html#changing-the-markdown-tool","module":"readme","doc":"In the examples above, we have used Earmark to convert Markdown to HTML. If you prefer, you can also use cmark (in C). Cmark Cmark is a CommonMark parser written in C. To use cmark add the elixir NIF wrapper cmark.ex as a dependency to your project: {:cmark, &quot;~&gt; 0.6&quot;, only: :dev} Update your project configuration to use Cmark: docs: [markdown_processor: ExDoc.Markdown.Cmark]"},{"type":"extras","title":"ExDoc - Contributing","text":null,"ref":"readme.html#contributing","module":"readme","doc":"The easiest way to test changes to ExDoc is to locally re-generate it&#39;s own docs: Run mix setup to install all dependencies Run mix build to generate docs. This is a custom alias that will build assets, recompile ExDoc, and output fresh docs into the doc/ directory Commit both assets/* and formatters/* changes (after running mix build)"},{"type":"extras","title":"ExDoc - License","text":null,"ref":"readme.html#license","module":"readme","doc":"ExDoc source code is released under Apache 2 License. The generated contents, however, are under different licenses based on projects used to help render HTML, including CSS, JS, and other assets. Check the LICENSE file for more information."},{"type":"extras","title":"Changelog","text":null,"ref":"changelog.html","module":"changelog","doc":"Changelog"},{"type":"extras","title":"Changelog - v0.19.3","text":null,"ref":"changelog.html#v0-19-3","module":"changelog","doc":"Enhancements Include a &quot;goto&quot; link on mouseover for expandable menu items Bug fixes Always expand menu items, even if has a single child Fix sidebar bottom margin on Firefox Fix anchor links sometimes not working by moving js to html head Unify code styling for makeup and hljs Do not replace the content of custom links pointing to Elixir modules Remove border-left on deprecated to not mistake it with a heading"},{"type":"extras","title":"Changelog - v0.19.2","text":null,"ref":"changelog.html#v0-19-2","module":"changelog","doc":"Enhancements Allow logo in SVG extension Allow functions to be grouped based on metadata Allow api-reference.html page to be disabled Allow nesting of modules by prefix Autolink mix help TASK Warn on undefined remote functions from project&#39;s docs Bug fixes Sort function names alphabetically in the sidebar Fix search input color Disable earmark smartypants option"},{"type":"extras","title":"Changelog - v0.19.1","text":null,"ref":"changelog.html#v0-19-1","module":"changelog","doc":"Enhancements Update CSS styles Remove sourcemaps from package"},{"type":"extras","title":"Changelog - v0.19.0","text":null,"ref":"changelog.html#v0-19-0","module":"changelog","doc":"This release requires Elixir v1.7 and later. For earlier Elixir versions, use ExDoc ~&gt; 0.18.0. Enhancements Do not select &quot;iex&gt;&quot; when selecting code samples Use makeup to perform ELixir&#39;s syntax highlighting (other languages still use highlight.js) Use [rel=&quot;noopener&quot;] on external links Link directly to page if sidebar item has no subitems Autolink Kernel and Kernel functions and special forms with shorthands (for example, only is_atom/1 is necessary) Trim EEx contents to reduce HTML size Allow apps to be excluded from umbrella app docs Bug fixes Exclude types with @typedoc false from the docs Make sure autolink considers the longest matching dependency name in case of shared prefixes"},{"type":"extras","title":"Changelog - v0.18.3","text":null,"ref":"changelog.html#v0-18-3","module":"changelog","doc":"Bug fix Fix formatting of typespecs causing errors Update jQuery Properly remove underscore from typespec links"},{"type":"extras","title":"Changelog - v0.18.2","text":null,"ref":"changelog.html#v0-18-2","module":"changelog","doc":"Enhancements Improve documentation pages for printing Autolink Kernel, Kernel.SpecialForms, and built-in types Annotate opaque types Add vertical-align:top to tables Allow module-function-arity references in links, for example: some code Remove underscore from view source link Run code formatter on typespecs (if one is available) Make night mode switch link more obvious"},{"type":"extras","title":"Changelog - v0.18.1","text":null,"ref":"changelog.html#v0-18-1","module":"changelog","doc":"Bug fixes Include missing formatter files"},{"type":"extras","title":"Changelog - v0.18.0","text":null,"ref":"changelog.html#v0-18-0","module":"changelog","doc":"Enhancements No longer strip empty parens from types Provide more extension point for markdown processors Remove assets from priv since they are now embedded at compile time Backwards incompatible changes Remove built-in support for hoedown markdown processor No longer add favicon when logo option is present (this was added in 0.17.0 but it was reported the logo almost never fits as a favicon)"},{"type":"extras","title":"Changelog - v0.17.1","text":null,"ref":"changelog.html#v0-17-1","module":"changelog","doc":"Bug fixes Fix broken search caused by outdated JavaScript files"},{"type":"extras","title":"Changelog - v0.17.0","text":null,"ref":"changelog.html#v0-17-0","module":"changelog","doc":"Enhancements Allow modules to be grouped on the sidebar with the :groups_for_modules option Allow extras to be grouped on the sidebar with the :groups_for_extras option Backwards incompatible changes The previous :group option that could be specified for each entry in :extras is no longer supported No longer add a specific section for &quot;Protocols&quot;. If you would like to segregate the protocols in your application, use the new :groups_for_modules functionality"},{"type":"extras","title":"Changelog - v0.16.4","text":null,"ref":"changelog.html#v0-16-4","module":"changelog","doc":"Enhancements Generate favicon link if a logo is available Bug fixes Do not version epub filename as the doc directory is likely already versioned"},{"type":"extras","title":"Changelog - v0.16.3","text":null,"ref":"changelog.html#v0-16-3","module":"changelog","doc":"Enhancements Make sure its own search.html page and provide history Generate source maps only if the --debug flag is given Users can now add custom HTML before the closing head tag and the closing body tag Highlight the target function/macro/type/callback when clicked Bug fixes Remove extra term() argument at start of macro spec Add unencoded link target for functions with special chars to cope with different behaviour in browsers"},{"type":"extras","title":"Changelog - v0.16.2","text":null,"ref":"changelog.html#v0-16-2","module":"changelog","doc":"Enhancements Link &lt;h3&gt; headers as well Add border to code tag Bug fixes Fix sidebar on mobile devices"},{"type":"extras","title":"Changelog - v0.16.1","text":null,"ref":"changelog.html#v0-16-1","module":"changelog","doc":"Bug fixes Fix hover icons coloring"},{"type":"extras","title":"Changelog - v0.16.0","text":null,"ref":"changelog.html#v0-16-0","module":"changelog","doc":"Enhancements Separate tasks into &quot;Mix Tasks&quot; in sidebar Add types to the search results Improve accessibility Bug fixes Strip nesting HTML tags in h2 headers Remove the old search results after every new search attempt"},{"type":"extras","title":"Changelog - v0.15.1","text":null,"ref":"changelog.html#v0-15-1","module":"changelog","doc":"Bug fixes Improve project name wrapping on HTML Properly set link in types with parameter Fix ExDoc.CLI.main/2 to keep --source-ref on Elixir v1.4 Do not fail if localStorage is not available"},{"type":"extras","title":"Changelog - v0.15.0","text":null,"ref":"changelog.html#v0-15-0","module":"changelog","doc":"Enhancements Closing the search takes you to where you were in the previous page Handle __struct__/0 by displaying the struct instead Warn when redirecting to a non-existent file List both functions and macros under &quot;Functions&quot; Automatically detect GitLab source URL patterns Bug fixes Break long specs into lines Fix the initial state of the sidebar hamburger Do not error when abstract code is missing Properly link to erlang lib dirs Backwards incompatible changes No longer support Pandoc Require Earmark 1.1"},{"type":"extras","title":"Changelog - v0.14.5","text":null,"ref":"changelog.html#v0-14-5","module":"changelog","doc":"Enhancements Allow ExDoc to work as an escript"},{"type":"extras","title":"Changelog - v0.14.4","text":null,"ref":"changelog.html#v0-14-4","module":"changelog","doc":"Enhancements Point to Elixir docs on hexdocs.pm Many improvements to layout and styling of EPUB formatter Support multiple formatters to be configured on mix.exs Also digest sidebar_items.js Force parentheses on type signature to remove ambiguity Generate top-level docs for an umbrella project Searching on mobile closes menu when the Enter key is hit"},{"type":"extras","title":"Changelog - v0.14.3","text":null,"ref":"changelog.html#v0-14-3","module":"changelog","doc":"Enhancements Support the :assets option that automatically copies all entries in the given directory to doc/assets Remove numbering on Extras subheaders from sidebar Pass file and line information to markdown formatters for better warnings Allow extra pages to be grouped together under a given heading Generate ids for default name/arity pairs so they can be linked (both remotely and locally) Bug fixes Fix autolink for functions containing %, {, } or uppercase characters in the name"},{"type":"extras","title":"Changelog - v0.14.2","text":null,"ref":"changelog.html#v0-14-2","module":"changelog","doc":"Enhancements Automatically generate documentations links to any of your dependencies (by default links to hexdocs.pm but allows the URL to be configured) Allow documentation to be generated to Erlang modules Bug fixes Make sure &quot;Top&quot; is not included twice on pages"},{"type":"extras","title":"Changelog - v0.14.1","text":null,"ref":"changelog.html#v0-14-1","module":"changelog","doc":"Bug fixes Include &quot;Top&quot; link in pages with no headings Include &quot;Top&quot; link in modules with no docs"},{"type":"extras","title":"Changelog - v0.14.0","text":null,"ref":"changelog.html#v0-14-0","module":"changelog","doc":"Enhancements Add support for the epub formatter Support extraction from &lt;h2&gt; headers out of the settext format Layout changes Indent documentation inside the function/macro/type/callback header Style types the same way as function/macro/callback and include a link to the source Increase font-sizes in the sidebar and code snippets Move the specs definition inside the function/macro/type/callback header and make better use of vertical space Use a gradient on the sidebar to avoid sudden cut-off when scrolling the modules list Fix the use of the back-button in some browsers Allow the whole sidebar to be navigated without moving away from the current page. Expand (+) and collapse (-) buttons have been added to aid exploration Numerically order pages/guides headers"},{"type":"extras","title":"Changelog - v0.13.2","text":null,"ref":"changelog.html#v0-13-2","module":"changelog","doc":"Bug fixes Avoid scrollbar from appearing on all code snippets"},{"type":"extras","title":"Changelog - v0.13.1","text":null,"ref":"changelog.html#v0-13-1","module":"changelog","doc":"Enhancements Autolink Elixir&#39;s stdlib modules and functions Show callbacks in search results Reduce size taken by font-sizes Increase size for headings in the moduledoc Bug fixes Fix opened sidebar on small screens Allow horizontal scrolling for code snippets on small screens"},{"type":"extras","title":"Changelog - v0.13.0","text":null,"ref":"changelog.html#v0-13-0","module":"changelog","doc":"Bug fixes Fix issue where docs would fail when being built on Erlang 19 Store templates in priv rather than in lib Backwards incompatible changes Require Elixir ~&gt; v1.2"},{"type":"extras","title":"Changelog - v0.12.0","text":null,"ref":"changelog.html#v0-12-0","module":"changelog","doc":"Enhancements Remove warnings when running on Elixir v1.3 Support for @optional_callbacks Improve styling for nested lists Include earmark as a default dependency Bug fixes Fix many styling and performance front-end related bugs"},{"type":"extras","title":"Changelog - v0.11.5","text":null,"ref":"changelog.html#v0-11-5","module":"changelog","doc":"Enhancements Support canonical URLs Bug fixes Autolink now allows digits in function names Sort specs by line to preserve ordering Focus on content element on document ready Remove ligature fix on Firefox and Safari as Google Fonts have been updated"},{"type":"extras","title":"Changelog - v0.11.4","text":null,"ref":"changelog.html#v0-11-4","module":"changelog","doc":"Bug fixes Fix ligature issues in recent browsers HTML escape headers Avoid warning on Elixir master (v1.3)"},{"type":"extras","title":"Changelog - v0.11.3","text":null,"ref":"changelog.html#v0-11-3","module":"changelog","doc":"Bug fixes Fix a regression where the sidebar wouldn&#39;t stick on small screens"},{"type":"extras","title":"Changelog - v0.11.2","text":null,"ref":"changelog.html#v0-11-2","module":"changelog","doc":"Enhancements Include night mode for docs Take advantage of extra space on large screens by widening sidebar Bug fixes Do not attempt to retrieve docs from Erlang modules"},{"type":"extras","title":"Changelog - v0.11.1","text":null,"ref":"changelog.html#v0-11-1","module":"changelog","doc":"Bug fixes Include callbacks even if a module defines a struct"},{"type":"extras","title":"Changelog - v0.11.0","text":null,"ref":"changelog.html#v0-11-0","module":"changelog","doc":"Enhancements From now on it&#39;s possible to set the title in the sidebar area for additional content, default: &quot;Pages&quot; Set the path and title of each additional page in mix.exs file Use the first h1 as menu title if title is not configured Include the project name as part of the header in small devices Bug fixes Increase the visual separation between functions Remove the extra- prefix for the additional documentation files Extra large images do not create an overflow in the content"},{"type":"extras","title":"Changelog - v0.10.0","text":null,"ref":"changelog.html#v0-10-0","module":"changelog","doc":"Enhancements Many improvements and bug fixes in new layout Reduced build size Overview has been renamed to API Reference All extra content, including API Reference, has been moved to inside &quot;Pages&quot; Extra files are now downcased and prefixed by extra-"},{"type":"extras","title":"Changelog - v0.9.0","text":null,"ref":"changelog.html#v0-9-0","module":"changelog","doc":"Enhancements Whole new clean, readable, usable, responsive layout Support for adding logo to generated docs (must be 64x64 pixels) Support for adding extra pages to generated docs Improve formatting of typespecs and callbacks Backwards incompatible changes --readme option and :readme configuration have been removed. Use :extras in your mix.exs file or pass --extra / -e in the command-line (may be given multiple times)"},{"type":"extras","title":"Changelog - v0.8.4","text":null,"ref":"changelog.html#v0-8-4","module":"changelog","doc":"Bug fixes Generate README.html file instead of readme.html as in previous releases Style fixes in the new layout"},{"type":"extras","title":"Changelog - v0.8.3","text":null,"ref":"changelog.html#v0-8-3","module":"changelog","doc":"Bug fixes Style fixes in the new layout"},{"type":"extras","title":"Changelog - v0.8.2","text":null,"ref":"changelog.html#v0-8-2","module":"changelog","doc":"Enhancements Uglify and minify JS and CSS code Performance improvements when building sidebar Redirect from index.html to proper page Bug fixes Style fixes in the new layout"},{"type":"extras","title":"Changelog - v0.8.1","text":null,"ref":"changelog.html#v0-8-1","module":"changelog","doc":"Bug fixes Style fixes in the new layout"},{"type":"extras","title":"Changelog - v0.8.0","text":null,"ref":"changelog.html#v0-8-0","module":"changelog","doc":"Enhancements New and responsive layout without frames"},{"type":"extras","title":"Changelog - v0.7.3","text":null,"ref":"changelog.html#v0-7-3","module":"changelog","doc":"Bug fixes Update highlight.js with fixes some inlining issues Require latest Earmark"},{"type":"extras","title":"Changelog - v0.7.2","text":null,"ref":"changelog.html#v0-7-2","module":"changelog","doc":"Bug fixes Support Elixir master Fix error reporting when modules are compiled without docs"},{"type":"extras","title":"Changelog - v0.7.1","text":null,"ref":"changelog.html#v0-7-1","module":"changelog","doc":"Enhancements Use type=search for search input Update highlight.js dependency Properly tag code comments as coming from Elixir/IEx unless noted otherwise Add support for hash redirection"},{"type":"extras","title":"Changelog - v0.7.0","text":null,"ref":"changelog.html#v0-7-0","module":"changelog","doc":"Enhancements Documentation is now generated at doc to follow OTP &quot;standard&quot;"},{"type":"extras","title":"Changelog - v0.6.2","text":null,"ref":"changelog.html#v0-6-2","module":"changelog","doc":"Enhancements Improvements to the document structure Add syntax highlight"},{"type":"extras","title":"Changelog - v0.6.1","text":null,"ref":"changelog.html#v0-6-1","module":"changelog","doc":"Enhancements Autolink modules and functions in the README Generate ids for callbacks starting with &quot;c:&quot; Ensure group ordering is consistent: TYPES &gt; FUNCTIONS &gt; MACROS &gt; CALLBACKS Allow users to search by Module.function"},{"type":"extras","title":"Changelog - v0.6.0","text":null,"ref":"changelog.html#v0-6-0","module":"changelog","doc":"Enhancements Support Elixir v1.0.0-rc1"},{"type":"extras","title":"Changelog - v0.5.2","text":null,"ref":"changelog.html#v0-5-2","module":"changelog","doc":"Bug fixes Use proper ANSI escape sequence on Mix success messages"},{"type":"extras","title":"Changelog - v0.5.1","text":null,"ref":"changelog.html#v0-5-1","module":"changelog","doc":"Enhancements Support Elixir v0.15.0 Add support for Earmark - no need for external processors"},{"type":"extras","title":"Changelog - v0.5.0","text":null,"ref":"changelog.html#v0-5-0","module":"changelog","doc":"Enhancements First public release Support pandoc and devinus/markdown as markdown processors"}]

var SIDEBAR_TYPES = [
  '#extras-list',
  '#modules-list',
  '#exceptions-list',
  '#tasks-list',
  '#search-list'
]
var SEARCH_INPUT = $('#search-list')
var SIDEBAR_NAV = $('.sidebar-listNav')
var AUTOCOMPLETE = $('.autocomplete')
var CONTENT = $('.content')
var KEYBOARD_SHORTCUTS = {
  n: {
    description: 'Toggle night mode',
    action: toggleNightMode
  },
  s: {
    description: 'Search',
    action: (event) => {
      openSidebar()
      focusSearchInput()
      event.preventDefault()
    }
  },
  c: {
    description: 'Toggle sidebar',
    action: toggleSidebar
  }
}

function setupSelected (id) {
  SIDEBAR_TYPES.forEach(function (element) {
    if (element === id) {
      $(element).parent().addClass('selected')
    } else {
      $(element).parent().removeClass('selected')
    }
  })
}

function collapse () {
  var $fullList = $('#full-list')
  var $currentPage = $('#full-list li.current-page')
  if ($currentPage.length > 0) {
    $fullList.scrollTop(
      $currentPage.offset().top - $fullList.offset().top - 40
    )
  }
}

/**
 * Fill the sidebar with links to different nodes
 *
 * This function replaces an empty unordered list with an
 * unordered list full of links to the different tasks, exceptions
 * and modules mentioned in the documentation.
 *
 * @param {Object} nodes - Container of tasks, exceptions and modules.
 * @param {String} filter - Filter of nodes, by default 'modules'.
 */
function fillSidebarWithNodes (nodes, filter) {
  const moduleType = helpers.getModuleType()

  filter = filter || moduleType
  var filtered = nodes[filter] || []
  var fullList = $('#full-list')
  fullList.replaceWith(sidebarItemsTemplate({'nodes': filtered, 'group': ''}))
  setupSelected(['#', filter, '-list'].join(''))

  $('#full-list li a').on('click', e => {
    var $target = $(e.target)
    // the user might have clicked on the nesting indicator
    var linkTag = $target.is('a') ? $target : $target.closest('a')
    if (linkTag.hasClass('expand') && !$target.is('span') && !e.shiftKey) {
      e.preventDefault()
      $(e.target).closest('li').toggleClass('open')
    } else {
      $('#full-list li.current-page li.current-hash').removeClass('current-hash')
      $(e.target).closest('li').addClass('current-hash')
    }
  })
}

function createHandler (name) {
  return function (event) {
    event.preventDefault()
    fillSidebarWithNodes(sidebarNodes, name)
    collapse()
  }
}

function addKeyboardShortuctsListeners () {
  $(document).on('keydown', function (e) {
    var tagName = e.target.tagName.toLowerCase()
    var inputElements = ['input', 'textarea']

    if (inputElements.indexOf(tagName) >= 0) { return true }

    var character = String.fromCharCode(e.which).toLowerCase()
    var shortcut = KEYBOARD_SHORTCUTS[character]
    if (shortcut) {
      shortcut.action(event)
    }
  })
}

// TODO: Clenaup + extract
// TODO: Add "_" and other chars allowed in elixir names
function autocompleteSanitize(text) {
  return text.replace(/[^A-Za-z0-9.]+/g, '')
}

function updateSuggestions(term) {
  var results = contentsJSON
    .filter(function (item) {
      return item.title.toLocaleLowerCase().indexOf(term.toLowerCase()) > -1
    })
    .slice(0, 5)
    .map(function (item) {
      var sanitizedTerm = autocompleteSanitize(term)
      var regexp = new RegExp(`(${ sanitizedTerm })`, 'i')
      var title = item.title.replace(regexp, '<strong class="autocomplete-foundFragment">$1</strong>')

      var resultItem = {
        title: title,
        doc: item.doc
      }
      return resultItem
    })

  var template = autocompleteResultsTemplate({
    results: results,
    term: term
  });
  AUTOCOMPLETE.html(template)
}

function hideAutocomplete () {
  AUTOCOMPLETE.hide()
}

function showAutocomplete () {
  AUTOCOMPLETE.show()
}

function updateAutocomplete (searchTerm) {
  if (!searchTerm) {
    hideAutocomplete()
  } else {
    showAutocomplete()
    updateSuggestions(searchTerm)
  }
}

function autocompleteMoveSelection (direction) {
  var currentlySelectedElement = $('.autocomplete-result.selected')
  var indexToSelect = -1
  if (currentlySelectedElement.length) {
     indexToSelect = parseInt(currentlySelectedElement.attr('data-index')) + direction
  }

  var elementToSelect = $(`.autocomplete-result[data-index="${ indexToSelect }"]`)

  if (!elementToSelect.length) {
    elementToSelect = $('.autocomplete-result:first')
  }

  $('.autocomplete-result').each(function () {
    $(this).toggleClass('selected', $(this).is(elementToSelect))
  });
}

function addEventListeners () {
  SIDEBAR_NAV.on('click', '#extras-list', createHandler('extras'))
  SIDEBAR_NAV.on('click', '#modules-list', createHandler('modules'))
  SIDEBAR_NAV.on('click', '#exceptions-list', createHandler('exceptions'))
  SIDEBAR_NAV.on('click', '#tasks-list', createHandler('tasks'))

  addKeyboardShortuctsListeners()

  $('.sidebar-search input').on('keydown', function (e) {
    if (e.keyCode === 27) { // escape key
      $(this).val('')
    } else if ((event.metaKey || event.ctrlKey) && e.keyCode === 13) { // cmd+enter
      $(this).parent().attr('target', '_blank').submit().removeAttr('')
      e.preventDefault()
    } else if (e.keyCode === 38) {
      autocompleteMoveSelection(-1)
      e.preventDefault()
    } else if (e.keyCode === 40) {
      autocompleteMoveSelection(1)
      e.preventDefault()
    }
  })

  $('.sidebar-search input').on('keyup', function (e) {
    if (e.keyCode !== 38 && e.keyCode !== 40) {
      updateAutocomplete($(this).val())
    }
  })

  var pathname = window.location.pathname
  if (pathname.substr(pathname.lastIndexOf('/') + 1) === 'search.html') {
    search(getParameterByName('q'))
  }
}

function getParameterByName (name) {
  const url = window.location.href
  const param = name.replace(/[\[\]]/g, '\\$&')
  const regex = new RegExp('[?&]' + param + '(=([^&#]*)|&|#|$)')
  const results = regex.exec(url)
  if (!results) return ''
  if (!results[2]) return ''
  return decodeURIComponent(results[2].replace(/\+/g, ' '))
}

function identifyCurrentHash () {
  var hash = helpers.getLocationHash() || 'content'

  const nodes = sidebarNodes[helpers.getModuleType()] || []
  const category = helpers.findSidebarCategory(nodes, hash)

  $(`#full-list li.current-page a.expand[href$="#${category}"]`)
    .closest('li')
    .addClass('open')

  $(`#full-list li.current-page a[href$="#${hash}"]`)
    .closest('li')
    .addClass('current-hash')
}

function fixLinks () {
  CONTENT.find('a').has('code').addClass('no-underline')
  CONTENT.find('a').has('img').addClass('no-underline')
}

/**
 * Focus on the content element.
 *
 * This is required so that the space bar (and similar key bindings)
 * work as soon as you visit a module's documentation. Without this,
 * the user would be forced to first click on the content element
 * before these keybindings worked.
 */
function fixSpacebar () {
  CONTENT.attr('tabindex', -1).focus()
}

function focusSearchInput() {
  SEARCH_INPUT.focus()
}

// Public Methods
// --------------

export function initialize () {
  fillSidebarWithNodes(sidebarNodes)
  hideAutocomplete()
  addEventListeners()
  collapse()
  identifyCurrentHash()
  fixLinks()
  fixSpacebar()
}
